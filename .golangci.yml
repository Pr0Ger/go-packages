linters:
  presets:
  - bugs        # bugs detection
  - comment     # comments analysis
  - complexity  # code complexity analysis
  - error       # error handling analysis
  - format      # code formatting
  # - import    # imports analysis
  - metalinter  # linter that contains multiple rules or multiple linters
  #  - module   # Go modules analysis
  - performance # performance
  - sql         # SQL
  # - style     # coding style
  # - test      # the analysis of the code of the tests
  - unused
  enable:
  # module; depguard & gomodguard is useless in almost any project
  - gomoddirectives
  # style preset
  - asciicheck
  - canonicalheader
  - containedctx
  - dogsled
  - dupl
  - errname
  - exptostd
  - forcetypeassert
  - gochecknoglobals
  - gochecknoinits
  - goconst
  - godox
  - goprintffuncname
  - gosimple
  - iface
  - lll
  - makezero
  - nakedret
  - nolintlint
  - nosprintfhostport
  - predeclared
  - promlinter
  - stylecheck
  - tagliatelle
  - thelper
  - tparallel
  - unconvert
  - whitespace
  - wastedassign
  # test preset
  - usetesting
linters-settings:
  dogsled:
    max-blank-identifiers: 3
  errcheck:
    exclude-functions:
    - (net/http.ResponseWriter).Write
    - github.com/go-chi/render.Render
    - github.com/go-chi/render.RenderList
  errorlint:
    errorf: true
  funlen:
    lines: 100
    statements: 60
  gci:
    sections:
    - standard
    - default
    - prefix(go.pr0ger.dev/x)
  godot:
    scope: declarations
  goimports:
    local-prefixes: go.pr0ger.dev/x
  gomoddirectives:
    replace-local: true
    retract-allow-no-explanation: false
  lll:
    tab-width: 4
  tagalign:
    sort: false # puts `example` tag before more important tag `json`
  tagliatelle:
    case:
      use-field-name: true
      rules:
        json: goSnake
        yaml: goSnake
issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  exclude-rules:
  - path: _test\.go
    linters:
    - dupl
    - goerr113
    - forcetypeassert
  - text: "weak random number generator"
    linters:
    - gosec
